name: Build Android APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.24.0"
  FLUTTER_CHANNEL: "stable"

jobs:
  android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      - name: Pub get
        run: flutter pub get

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Firma (solo si configuraste secretos). Se salta automÃ¡ticamente si no existen.
      - name: Prepare keystore
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/app/my-release-key.jks
          cat > android/key.properties <<EOF
          storePassword=${ANDROID_KEYSTORE_PASSWORD}
          keyPassword=${ANDROID_KEY_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          storeFile=my-release-key.jks
          EOF
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}

      - name: Build APK (release, split per abi)
        run: flutter build apk --release --split-per-abi

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/*.apk

      # (Opcional) generar AAB por si luego quieres Play Store
      - name: Build AAB (release)
        run: flutter build appbundle --release

      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/*.aab
